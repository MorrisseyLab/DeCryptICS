## install conda:
###################
mkdir /your/folder
cd /your/folder
wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
bash Miniconda3-latest-Linux-x86_64.sh -b -p /full/path/to/install-dir
# config:
export PATH=/full/path/to/your/folder/bin:$PATH
cd ./bin
conda config --add channels conda-forge
conda config --add channels defaults
conda config --add channels r
conda config --add channels bioconda
conda update -n base conda

# create a conda environment, where you can choose the name_of_env
./conda create -n name_of_env

# activate environment
source /full/path/to/install-dir/bin/activate name_of_env

# add shortcut to activate env
vim ~/.bashrc
# add the following line at bottom of file, where you can choose the shortcut_name:
alias shortcut_name="source /full/path/to/install-dir/bin/activate name_of_env"
# save the file and quit, then source:
source ~/.bashrc
# now, just typing shortcut_name will activate your new conda environment

## install openslide:
###################
wget https://github.com/openslide/openslide/releases/download/v3.4.1/openslide-3.4.1.tar.gz
tar -xvzf openslide-3.4.1.tar.gz
cd openslide-3.4.1
# dependencies:
sudo apt-get install libopenjp2-7 libopenjp2-7-dev libtiff5-dev libcairo2-dev libgdk-pixbuf2.0-dev libxml2-dev libsqlite3-dev
# install:
./configure
make
sudo make install
sudo ldconfig

## install libvips:
###################
git clone git://github.com/jcupitt/libvips.git
# dependencies:
sudo apt-get install gtk-doc-tools swig libtool libglib2.0-dev gobject-introspection
# install:
./autogen.sh
make
sudo make install
sudo ldconfig

## installing python requirements
###################
conda install opencv
conda install -c defaults libprotobuf protobuf
conda install keras (if you intend to follow the GPU installation below, this will be removed and replaced with keras-gpu)
conda install matplotlib
conda update ffmpeg
pip install --user pyvips
pip install openslide-python
conda install scikit-learn
conda install numba
conda install joblib
conda install pandas numpy scipy
pip install xlrd

## If you just want to run DeCryptICS on your CPU, then the follow installation of CUDA, CUDNN and tensorflow can be skipped. Scroll down to "Final touches".

## install GPU:
###################
# CUDA 9.0
# CUDNN 7.0.4
# tensorflow 1.6.0

# Following the guides at 
# https://medium.com/@zhanwenchen/install-cuda-and-cudnn-for-tensorflow-gpu-on-ubuntu-79306e4ac04e
# https://github.com/williamFalcon/tensorflow-gpu-install-ubuntu-16.04

## NVIDIA drivers
##################
# install dependencies
sudo apt-get update
sudo apt-get install penjdk-8-jdk git python-dev python3-dev python-numpy python3-numpy build-essential python-pip python3-pip python-virtualenv swig python-wheel libcurl3-dev curl vim
sudo apt-get install nvidia-384 nvidia-modprobe

# Reboot your machine but enter BIOS to disable Secure Boot. 
# Typically you can enter BIOS by hitting F12 rapidly as soon as the system restarts.

# After reboot check the installation with
nvidia-smi
# (Should list graphics card as a CUDA-ready device)

## install CUDA 9.0
##################
# move to home directory and download CUDA Runfile
cd
wget https://developer.nvidia.com/compute/cuda/9.0/Prod/local_installers/cuda_9.0.176_384.81_linux-run
chmod +x cuda_9.0.176_384.81_linux-run
./cuda_9.0.176_384.81_linux-run --extract=$HOME

# The above will extract three components, 
# 1. NVIDIA-Linux-x86_64-384.81.run
# 2. cuda-linux.9.0.176-22781540.run 
# 3. cuda-samples.9.0.176-22781540-linux.run
# Install number 2.:
sudo ./cuda-linux.9.0.176-22781540.run
# Accept license and when install complete, install the samples
sudo ./cuda-samples.9.0.176-22781540-linux.run

# configure the runtime library
sudo bash -c "echo /usr/local/cuda/lib64/ > /etc/ld.so.conf.d/cuda.conf"
sudo ldconfig

# Reboot and run tests
cd /usr/local/cuda-9.0/samples
sudo make
# wait for this to complete, ignoring lots of warnings, then run
cd /usr/local/cuda/samples/bin/x86_64/linux/release
./deviceQuery
# which should display information about your CUDA-ready GPU if the above installation went well.

# At this stage you can delete the downloaded cuda_9.0.176_384.81_linux-run file and the three extracted files, NVIDIA-Linux-x86_64-384.81.run, cuda-linux.9.0.176-22781540.run and cuda-samples.9.0.176-22781540-linux.run

## install CUDNN 7.0
##################
# Download two CUDNN .deb files for CUDNN 7.0.4: the runtime library and the developer library. Move into home folder and install files in that order:
cd
wget https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn7_7.0.4.31-1+cuda9.0_amd64.deb
wget https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn7-dev_7.0.4.31-1+cuda9.0_amd64.deb
sudo dpkg -i libcudnn7_7.0.4.31-1+cuda9.0_amd64.deb
sudo dpkg -i libcudnn7-dev_7.0.4.31-1+cuda9.0_amd64.deb

# Finally add path environment variables to ~/.bashrc
vim ~./bashrc
# add at the bottom:
export LD_LIBRARY_PATH="LD_LIBRARY_PATH=${LD_LIBRARY_PATH:+${LD_LIBRARY_PATH}:}/usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64"
export CUDA_HOME=/usr/local/cuda
export PATH="$PATH:/usr/local/cuda/bin"
source ~/.bashrc

# Replacing keras with keras-gpu
# first activate your conda environment using your shortcut
shortcut_name
conda uninstall keras
conda install keras-gpu
# may now need to update numpy, scipy and pandas
conda install pandas numpy scipy
# install correct version of tensorflow:
pip install -U tensorflow-gpu==1.6.0

# to test whether python and keras-gpu recognises your GPU, open python
python
# and run
from tensorflow.python.client import device_lib
print(device_lib.list_local_devices())
# which should show device information about your GPU and CPU

## Final touches
##################
# All that remains is to clone DeCryptICS from github and download the optimised weights for the neural network:
sudo apt-get install git
cd /path/to/software
git clone https://github.com/MorrisseyLab/DeCryptICS.git
mkdir ./DeCryptICS/DNN/weights
wget "https://www.dropbox.com/s/6nlqsed99x5ourl/tile256_for_X_best_weights.hdf5?dl=0" -O ./DeCryptICS/DNN/weights/tile256_for_X_best_weights.hdf5

# Then, when your run DeCryptICS, make sure to activate your conda environment first.
# That's it!


