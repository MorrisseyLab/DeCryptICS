Rcpp::sourceCpp('ExponentialClass.cpp')
install.packages("RcppArmadillo")
Rcpp::sourceCpp('ExponentialClass.cpp')
area = read_csv("area.out", col_names = F)
mean_nuc = read_csv("mean.out", col_names = F)
halo = read_csv("Halo.out", col_names = F)
init_gamma = read_csv("Init_gamma.out", col_names = F)
halo = as.matrix(halo)
mean_nuc = as.matrix(mean_nuc)
area = as.matrix(area)
init_gamma = as.matrix(init_gamma)
dir()
library(tidyverse)
library(microbenchmark)
area = read_csv("area.out", col_names = F)
mean_nuc = read_csv("mean.out", col_names = F)
halo = read_csv("Halo.out", col_names = F)
init_gamma = read_csv("Init_gamma.out", col_names = F)
halo = as.matrix(halo)
mean_nuc = as.matrix(mean_nuc)
area = as.matrix(area)
init_gamma = as.matrix(init_gamma)
mcmc_out =  sampleDists(as.matrix(halo), as.matrix(mean_nuc), as.matrix(area), as.matrix(init_gamma), 2000, 5)
mcmc_out$mcmc_out %>% data.frame() %>% mutate(indx = 1:n()) %>% gather(var, value, -indx) %>% ggplot(aes(x = indx, y = value))+
geom_line()+facet_wrap(~var, scales = "free")
library(tidyverse)
library(microbenchmark)
Rcpp::sourceCpp('ExponentialClass.cpp')
area = read_csv("../MixModel_NumbaClass_test/area.out", col_names = F)
mean_nuc = read_csv("../MixModel_NumbaClass_test/mean.out", col_names = F)
halo = read_csv("../MixModel_NumbaClass_test/Halo.out", col_names = F)
init_gamma = read_csv("../MixModel_NumbaClass_test/Init_gamma.out", col_names = F)
halo = as.matrix(halo)
mean_nuc = as.matrix(mean_nuc)
area = as.matrix(area)
init_gamma = as.matrix(init_gamma)
mcmc_out =  sampleDists(as.matrix(halo), as.matrix(mean_nuc), as.matrix(area), as.matrix(init_gamma), 2000, 5)
microbenchmark(sampleDists(halo, mean_nuc, area, init_gamma, 2000, 5), times = 10)
install.packages("microbenchmark")
library(microbenchmark)
microbenchmark(sampleDists(halo, mean_nuc, area, init_gamma, 2000, 5), times = 10)
microbenchmark(sampleDists(halo, mean_nuc, area, init_gamma, 4000, 20), times = 10)
microbenchmark(sampleDists(halo, mean_nuc, area, init_gamma, 1000, 10), times = 10)
Rcpp::sourceCpp('ExponentialClass.cpp')
mcmc_out =  sampleDists(as.matrix(halo), as.matrix(mean_nuc), as.matrix(area), as.matrix(init_gamma), 2000, 5)
